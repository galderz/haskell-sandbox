-- Haskell Playground 1.0
not True && False
not (True && False)
not $ True && False

let x = 5
not (x == 6)

(1 * 2) > 5

["Merry"] > ["Happy"]
['1', '2', '3'] ++ "look at me!"

-- Final chapter exercises

let awesome = ["Papuchon", "curry", "Haskell"]
let alsoAwesome = ["Quake", "The Simons"]
let allAwesome = [awesome, alsoAwesome]

length
length [1, 2, 3, 4, 5]
length [(1, 2), (2, 3), (3, 4)]
length allAwesome
length $ concat allAwesome

(/)
6 / 3
6
3
-- 6 / (length [1, 2, 3])
6 `div` (length [1, 2, 3])

2 + 3 == 5

let x = 5
x + 3 == 5

length allAwesome == 2
-- length [1, 'a', 3, 'b']
length allAwesome + length awesome
(8 == 8) && ('b' < 'a')
-- (8 == 8) && 9

isPalindrome "blah" == False
isPalindrome "aga" == True
isPalindrome "racecar" == True

myAbs 0 == 0
myAbs (-1) == 1
myAbs 1 == 1

f (1, 2) (3, 4) == ((2, 4), (1, 3))

f' [1, 2, 3]

x' 5

x'' [1, 2, 3]

f'' (1, 2)

show
(==)
fst
(+)
