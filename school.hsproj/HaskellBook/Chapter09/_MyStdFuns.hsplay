-- Haskell Playground 1.0
myMinimum [1,2,3,4] == minimum [1,2,3,4]
myMinimum [4,3,2,1] == minimum [4,3,2,1]


myMaximum [1,2,3,4] == maximum [1,2,3,4]
myMaximum [4,3,2,1] == maximum [4,3,2,1]


myMinimumBy (\_ _ -> GT) [1..10] == 10
myMinimumBy (\_ _ -> LT) [1..10] == 1
myMinimumBy compare [1..10] == 1


myMaximumBy (\_ _ -> GT) [1..10] == 1
myMaximumBy (\_ _ -> LT) [1..10] == 10
myMaximumBy compare [1..10] == 10


squishAgain [[1,2,3]] == [1,2,3]
squishAgain [[1,2,3],[4,5,6]] == [1,2,3,4,5,6]
squishAgain [] == []


squishMap (\x -> [1, x, 3]) [2]
squishMap (\x -> [1, x, 3]) [2] == [1,2,3]
squishMap (\x -> "WO "++[x]++" HOO ") "123"
squishMap (\x -> "WO "++[x]++" HOO ") "123" == "WO 1 HOO WO 2 HOO WO 3 HOO "


squish [[1,2,3]] == [1,2,3]
squish [[1,2,3],[4,5,6]] == [1,2,3,4,5,6]
squish [] == []


myReverse [1..5] == reverse [1..5]
myReverse [1,2,3] == reverse [1,2,3]
myReverse [] == reverse []


myElemAny 1 [] == elem 1 []
myElemAny 1 [1..10] == elem 1 [1..10]
myElemAny 2 [1..10] == elem 2 [1..10]


elem 1 [1..10]
elem 2 [1..10]
myElem 1 [] == elem 1 []
myElem 1 [1..10] == elem 1 [1..10]
myElem 2 [1..10] == elem 2 [1..10]


myAny even [1,3,5] == False
myAny even [] == False
myAny odd [1,3,5] == True
myAny odd [] == False
myAny odd [1] == True
myAny odd [1,2] == True


myOr [] == or []
myOr [True,True] == or [True,True]
myOr [False,True] == or [False,True]
myOr [True,False] == or [True,False]
myOr [False,False] == or [False,False]

