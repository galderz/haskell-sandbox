-- Haskell Playground 1.0
foldr (+) 0 (1 :  2 :  3 : [])
--           1 + (2 + (3 + 0))


let xs = map show [1..5]
showFoldr xs


let u = undefined
foldr (+) 0 [1, 2, 3, 4, u]
-- Non-strict evaluation avoids reaching undefined
foldr (+) 0 (take 4 [1, 2, 3, 4, u])

foldr (+) 0 ([1, 2, 3, 4] ++ u)
foldr (+) 0 (take 4 ([1, 2, 3, 4] ++ u))


-- length evaluates the spine unconditionally, but  not the values
length [1, 2, 3, 4, undefined]
length ([1, 2, 3, 4] ++ undefined)
length (take 4 ([1, 2, 3, 4] ++ undefined))
length $ take 2 $ take 4 ([1, 2] ++ undefined)

-- foldr will never force evaluation of any of its arguments, so bottom can be part of the spine:
foldr (\_ _ -> 9001) 0 [1..5]
foldr (\_ _ -> 9001) 0 [1, 2, 3, undefined]
foldr (\_ _ -> 9001) 0 ([1, 2, 3] ++ undefined)

-- Everything is fine unless the first piece of the spine is bottom:
--foldr (\_ _ -> 9001) 0 undefined

-- These two work it isn't the first cons cell 
-- that is bottom. The undefined values are inside 
-- the cons cells, not in the spine itself
foldr (\_ _ -> 9001) 0 [1, undefined]
foldr (\_ _ -> 9001) 0 [undefined, undefined]


const 1 2
const 2 1
foldr const 0 [1..5]
foldr const 0 [1, undefined]
foldr const 0 ([1, 2] ++ undefined)
foldr const 0 [undefined, 2]

