-- Haskell Playground 1.0
foldl(+) 0  (1 :  2   : 3 : []) 
--     ((0 + 1) + 2 ) + 3


let xs = map show [1..5]
showFoldl xs


foldr (+) 0 [1..5]
scanr (+) 0 [1..5]

foldl (+) 0 [1..5]
scanl (+) 0 [1..5]

-- (1 ^ (2 ^ (3 ^ 2)))
foldr (^) 2 [1..3]
-- (((2 ^ 1) ^ 2) ^ 3)
foldl (^) 2 [1..3]


-- (1 : (2 : (3 : [])))
foldr (:) [] [1..3]

-- foldl (:) [] [1..3] <- does not compile
-- ((([] : 1): 2) : 3) <- because this does not work
-- (:) :: a -> [a] -> [a] <- cons definition
-- flip: takes backwards arguments and turn that upside down
-- IOW, it'll flip each set of arguments:
-- ((([] : 1): 2) : 3)
-- f = flip (:)
-- ((([] `f` 1) `f` 2) `f` 3)-- (([1] `f` 2) `f` 3)--  ([2, 1] `f` 3)-- [3, 2, 1]
-- Even after satisfying types, the result is different to foldr
foldl (flip (:)) [] [1..3]

const
-- const 1 (const 2 (const 3 0))...
-- (const 1 _) <-- the rest of fold is never evaluated
foldr const 0 [1..5]

-- const (const (const 0 3) 2) 1...
foldr (flip const) 0 [1..5]

-- (const (const (const 0 1) 2) 3 ...)
foldl const 0 [1..5]

-- (const 3 (const 2 (const 1 0)) ...)
foldl (flip const) 0 [1..5]